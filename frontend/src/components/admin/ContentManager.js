import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"../ui/card\";\nimport { Button } from \"../ui/button\";\nimport { Input } from \"../ui/input\";\nimport { Textarea } from \"../ui/textarea\";\nimport { Label } from \"../ui/label\";\nimport { toast } from \"../../hooks/use-toast\";\nimport { contentAPI, organizeContent } from \"../../services/api\";\nimport { Edit, Save, X } from \"lucide-react\";\n\nconst ContentManager = () => {\n  const [content, setContent] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [editingItem, setEditingItem] = useState(null);\n  const [editValue, setEditValue] = useState(\"\");\n\n  useEffect(() => {\n    fetchContent();\n  }, []);\n\n  const fetchContent = async () => {\n    try {\n      const response = await contentAPI.getAll();\n      const organizedContent = organizeContent(response.data);\n      setContent(organizedContent);\n    } catch (error) {\n      console.error('Error fetching content:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load content\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const startEditing = (section, key, currentValue) => {\n    setEditingItem(`${section}.${key}`);\n    setEditValue(currentValue || \"\");\n  };\n\n  const cancelEditing = () => {\n    setEditingItem(null);\n    setEditValue(\"\");\n  };\n\n  const saveContent = async (section, key, contentId) => {\n    try {\n      await contentAPI.update(contentId, {\n        section,\n        key,\n        value: editValue,\n        type: \"text\"\n      });\n      \n      // Update local state\n      setContent(prev => ({\n        ...prev,\n        [section]: {\n          ...prev[section],\n          [key]: editValue\n        }\n      }));\n      \n      setEditingItem(null);\n      setEditValue(\"\");\n      \n      toast({\n        title: \"Success\",\n        description: \"Content updated successfully\"\n      });\n    } catch (error) {\n      console.error('Error updating content:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update content\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const contentSections = [\n    {\n      title: \"Hero Section\",\n      section: \"hero\",\n      fields: [\n        { key: \"brand_name\", label: \"Brand Name\", type: \"text\" },\n        { key: \"tagline\", label: \"Tagline\", type: \"text\" },\n        { key: \"description\", label: \"Description\", type: \"textarea\" }\n      ]\n    },\n    {\n      title: \"About Section\", \n      section: \"about\",\n      fields: [\n        { key: \"title\", label: \"Title\", type: \"text\" },\n        { key: \"subtitle\", label: \"Subtitle\", type: \"text\" },\n        { key: \"description\", label: \"Description\", type: \"textarea\" },\n        { key: \"image\", label: \"Image URL\", type: \"text\" }\n      ]\n    },\n    {\n      title: \"Contact Information\",\n      section: \"contact\",\n      fields: [\n        { key: \"name\", label: \"Full Name\", type: \"text\" },\n        { key: \"phone\", label: \"Phone Number\", type: \"text\" },\n        { key: \"email\", label: \"Email Address\", type: \"text\" },\n        { key: \"location\", label: \"Location\", type: \"text\" },\n        { key: \"office_address\", label: \"Office Address\", type: \"textarea\" },\n        { key: \"experience_start\", label: \"Experience Start\", type: \"text\" },\n        { key: \"experience_years\", label: \"Years of Experience\", type: \"text\" }\n      ]\n    },\n    {\n      title: \"Social Media\",\n      section: \"social\",\n      fields: [\n        { key: \"instagram\", label: \"Instagram URL\", type: \"text\" },\n        { key: \"facebook\", label: \"Facebook URL\", type: \"text\" },\n        { key: \"youtube\", label: \"YouTube URL\", type: \"text\" }\n      ]\n    }\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center\">Loading content...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Content Management</h2>\n        <p className=\"text-gray-600\">Edit website content directly. Changes will be reflected on the live website.</p>\n      </div>\n\n      {contentSections.map((sectionConfig) => (\n        <Card key={sectionConfig.section}>\n          <CardHeader>\n            <CardTitle>{sectionConfig.title}</CardTitle>\n            <CardDescription>\n              Manage content for the {sectionConfig.title.toLowerCase()}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {sectionConfig.fields.map((field) => {\n              const currentValue = content[sectionConfig.section]?.[field.key] || \"\";\n              const isEditing = editingItem === `${sectionConfig.section}.${field.key}`;\n              \n              return (\n                <div key={field.key} className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    {field.label}\n                  </Label>\n                  \n                  {isEditing ? (\n                    <div className=\"space-y-2\">\n                      {field.type === \"textarea\" ? (\n                        <Textarea\n                          value={editValue}\n                          onChange={(e) => setEditValue(e.target.value)}\n                          placeholder={field.label}\n                          rows={4}\n                          className=\"w-full\"\n                        />\n                      ) : (\n                        <Input\n                          value={editValue}\n                          onChange={(e) => setEditValue(e.target.value)}\n                          placeholder={field.label}\n                          className=\"w-full\"\n                        />\n                      )}\n                      \n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          onClick={() => saveContent(sectionConfig.section, field.key, 'temp-id')}\n                          className=\"bg-green-600 hover:bg-green-700\"\n                        >\n                          <Save className=\"w-4 h-4 mr-1\" />\n                          Save\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          onClick={cancelEditing}\n                        >\n                          <X className=\"w-4 h-4 mr-1\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"group relative\">\n                      <div className=\"p-3 bg-gray-50 rounded-lg border min-h-[40px] flex items-center justify-between\">\n                        <span className={`${currentValue ? 'text-gray-900' : 'text-gray-500 italic'}`}>\n                          {currentValue || `No ${field.label.toLowerCase()} set`}\n                        </span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => startEditing(sectionConfig.section, field.key, currentValue)}\n                          className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport default ContentManager;